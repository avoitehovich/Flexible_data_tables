<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core" styleClass="#{javascript:compositeData.ccRestViewClass}"
	style="#{javascript:compositeData.ccRestViewStyle}">

	<xp:this.beforePageLoad><![CDATA[#{javascript:ccRestView.init()}]]></xp:this.beforePageLoad>
	<xp:panel style="">
		<xp:this.styleClass><![CDATA[#{javascript:"panel" + compositeData.thisView + " panelRestViewContainer" + (compositeData.showFixedHeader ? "" : " no-fixed-header")}]]></xp:this.styleClass>

		<xp:table style="width:100%;">

			<xp:this.attrs>
				<xp:attr name="class">
					<xp:this.value><![CDATA[#{javascript:compositeData.dataTableClassDefault == null ? "display tableRest" : compositeData.dataTableClassDefault + " tableRest" }]]></xp:this.value>
				</xp:attr>
			</xp:this.attrs>
		</xp:table>


		<xp:div style="">
			<xp:this.styleClass><![CDATA[#{javascript:"loading-container loading"+compositeData.thisView}]]></xp:this.styleClass>
			<div style="" class="loading-inner">
				<i class="fa fa-refresh fa-2x fa-spin" style="margin-right:10px;margin-top:5px;">
				</i>
				<span style="font-size:1.5em">Loading data...</span>
			</div>
		</xp:div>
	</xp:panel>
	<xp:button value="Hidden - View Refresh" id="btnRefresh"
		styleClass="btnRefresh" style="display:none"
		rendered="#{javascript:compositeData.showRefreshButton != false}">

		<xp:eventHandler event="onclick" submit="false">
			<xp:this.script><![CDATA[#{javascript:compositeData.thisView}.build();
return false;
]]>
			</xp:this.script>
		</xp:eventHandler>
	</xp:button>
	<xp:inputText style="display:none">


		<xp:this.value><![CDATA[#{viewScope[compositeData.thisView]}]]></xp:this.value>
		<xp:this.styleClass><![CDATA[${javascript:"fld" + compositeData.thisView}]]></xp:this.styleClass>
		<xp:this.id><![CDATA[${javascript:"fld" + compositeData.thisView}]]></xp:this.id>
	</xp:inputText>
	<xp:scriptBlock>

		<xp:this.value><![CDATA[		var loadOnInit = "#{javascript:viewScope[compositeData.viewKey].loadOnInit}";
var loadOnInitOverride = "#{compositeData.loadOnInit}";
loadOnInit = loadOnInitOverride != "" ? loadOnInitOverride : loadOnInit;

var dataTableVar = {};  // global variable to store information about datatables
						// ajax request to be used by refresh button 
var #{compositeData.thisView} = {
	config : {
		keys : "",
		search: ""
	},
	stats : {
		renderStart: 0,
		renderTime: 0,
		timeToGetDataStart: 0,
		timeToGetData: 0,
		timeToRenderTableStart: 0,
		timeToRenderTable: 0,
		timeTotal: 0,
	},
	dataTableClass : "",
	thisView : "#{compositeData.thisView}",
	cancelResize : false,
	viewConfig : {},
	isInitComplete: false,
	destroy : function() {
		try {
			console.log("--- start destroy() ---");
			var thisView = "#{compositeData.thisView}";
			if ($(".tableRest tbody tr",$(".panel"+thisView)).length > 0) {
				$(".tableRest",$(".panel"+thisView)).DataTable().destroy();
			}
			console.log("--- end destroy() ---");
		} catch(e) {
			console.log("error in ccRestView.destroy() : " + e.toString())
		}
	}, 
	build : function () {
		this.stats.renderStart = Date.now();
		var options = arguments[0];  
		var cancelResize = false;
		console.log("--- start build() ---");
		var thisView = this.thisView; //"#{compositeData.thisView}";
		var fhClass = "#{compositeData.fixedHeaderClass}";
		var ffClass = "#{compositeData.fixedFooterClass}";
		
		var infoClass = "#{compositeData.infoClass}";
		var showFixedHeader = "#{compositeData.showFixedHeader}" == "true" ? true : false;
		var showFixedFooter = "#{compositeData.showFooter}" == "true" ? true : false;
		var dataTableClass1 = "#{compositeData.dataTableClass}";  // set in the ccRestView config
		var dataTableClass2 = "#{javascript:viewScope[compositeData.viewKey].tableClass}";  // set in the view definition config
		var dataTableClass = "." + dataTableClass1;
		var restPath = "#{javascript:admin.getRestPath()}";
		#{compositeData.thisView}.dataTableClass = dataTableClass;
		var viewport = "#{compositeData.viewport}";
		var ccRestViewClass = "#{compositeData.ccRestViewClass}";
		
		/******************************************************
		 CHECK TO SEE IF TABLE EXISTS AND NEEDS TO BE RELOADED	
		******************************************************/
		if ($(dataTableClass + " tbody tr",$(".panel"+thisView)).length > 0) {
			ccRestView.loading("show",viewport,thisView)
			console.log("reloading datatable")
			// refresh the view
			
			// check to see if a new key was added
			if (#{compositeData.thisView}.config.keys != "") {
				var url = $(dataTableClass,$(".panel"+thisView)).DataTable().ajax.url();
				var qs = strRight(url,"?").split("&");
				url = strLeft(url,"?")
				var newqs = [];
				for (var x=0;x<qs.length;x++) {
					if (qs[x].indexOf("keys") == -1) {
						newqs.push(qs[x])
					}
				}
				newqs.push("keys="+#{compositeData.thisView}.config.keys);
				$(dataTableClass,$(".panel"+thisView)).DataTable().ajax.url(url + "?" + newqs.join("&"));	
			}
			
			// check to see if a new search was added
			if (#{compositeData.thisView}.config.search != "") {
				var url = $(dataTableClass,$(".panel"+thisView)).DataTable().ajax.url();
				var qs = strRight(url,"?").split("&");
				url = strLeft(url,"?")
				var newqs = [];
				for (var x=0;x<qs.length;x++) {
					if (qs[x].indexOf("search") == -1) {
						newqs.push(qs[x])
					}
				}
				newqs.push("search="+#{compositeData.thisView}.config.search);
				$(dataTableClass,$(".panel"+thisView)).DataTable().ajax.url(url + "?" + newqs.join("&"));
			}
			
			// check to see if new parameters were passed in to the build call
			
			var restParams = #{compositeData.thisView}.config.restParams;
			if (typeof restParams != "string") {
				restParams = restParams.join("");
			}
			
			if (options != null) {
				var newSearchParam = ""
				if (options.hasOwnProperty('category')) { 
					newSearchParam="&category="+options.category; 
				}
				if (options.hasOwnProperty('params')) { 
					#{compositeData.thisView}.config.restParams = options.params;
					restParams = options.params;
					alert("Restparams="+restParams)
				}
				#{compositeData.thisView}.config.searchParam = newSearchParam;
				//url = "/" + restPath + "/" + #{compositeData.thisView}.config.restPageToUse + ".xsp/" + #{compositeData.thisView}.config.restToUse + "?x=x" + newSearchParam + "&" + restParams;
				url = #{compositeData.thisView}.config.restUrl + "?x=x" + newSearchParam + "&" + restParams;
				console.log("@@ url="+url)
				$(dataTableClass,$(".panel"+thisView)).DataTable().ajax.url(url);
			} 
			
			/********************************************************************
			*  RELOAD
			********************************************************************/
			$(dataTableClass,$(".panel"+thisView)).DataTable().ajax.reload(function() {
			
				/***************************************************************
				* FIXED FOOTER
				**************************************************************/
				if (showFixedFooter) {
				
					ccRestView.buildFooter(#{compositeData.thisView}.ffObject);
					
					// custom fixed footer code
					//#{compositeData.fixedFooterCode}(this,thisView,vTable,params,o);
				}
				
				if (#{compositeData.thisView}.config.restParams.length < 2) {
					console.log("hiding loading")
					ccRestView.loading("hide",viewport,thisView)
				}
			});
			
			return;
		} // end of reloading data
		
		/********************************************************************
		*  BUILD TABLE FOR FIRST TIME
		*  SETUP VARS BASED ON VIEW DEFINITION
		*  AND DYNAMICALLY PASSED CONFIG OPTIONS
		********************************************************************/
		// Process the columns in the view definition
		var colsObject = {};
		var viewJson = #{javascript:viewScope[compositeData.viewKey].json};
		colsObject.viewJson = viewJson;
		
		// View definition information is stored in viewScope[compositeData.viewKey]
		var viewKey = "#{compositeData.viewKey}"
		var rest = $U.getUrlParam("key") != "" ? $U.getUrlParam("key") : viewKey; // location.href.split("=")[1];
		var restService = "#{javascript:viewScope[compositeData.viewKey].restService}";
		var restPage = "#{javascript:viewScope[compositeData.viewKey].restPage}";
		var xagent = "#{javascript:viewScope[compositeData.viewKey].xagent}";
		var retColumn = "#{javascript:viewScope[compositeData.viewKey].retColumn}";
		var xpage = "#{javascript:viewScope[compositeData.viewKey].xpage}";
		
		var ordering = "#{compositeData.ordering}";
		/*
		var sortDefault = "#{javascript:viewScope[compositeData.viewKey].sortDefault}";
		var sortDefaultOrder = "#{javascript:viewScope[compositeData.viewKey].sortDefaultOrder}";
		var sortSecond = "#{javascript:viewScope[compositeData.viewKey].sortSecond}";
		var sortSecondOrder = "#{javascript:viewScope[compositeData.viewKey].sortSecondOrder}";
		var sortServer = "#{javascript:viewScope[compositeData.viewKey].sortServer}";
		var sortServerOrder = "#{javascript:viewScope[compositeData.viewKey].sortServerOrder}";
		*/
		var sortArray = #{viewScope[compositeData.viewKey].sortArray};
		var query = "#{javascript:viewScope[compositeData.viewKey].query}";
		var search = "#{compositeData.search}";
		var keys = "#{compositeData.keys}";
		var keyIsCategory = "#{compositeData.keyIsCategory}";
		var showFilter = "#{compositeData.showFilter}" == "false" ? false : true;
		var showFilterText = "#{compositeData.showFilterText}" == "false" ? false : true;
		var filterText = "#{compositeData.filterText}" != "" ? "#{compositeData.filterText}" : "filter";
		var filterPlaceholder = "#{compositeData.filterPlaceholder}";
		if (showFilterText) {
			var searchLang = filterText != "" ? filterText : "filter";
		} else {
			var searchLang = "";
		}
		
		var scroller = "#{compositeData.scroller}";
		var scrollerVar = scroller == "true" ? true : false;
		var scrollerCount = #{compositeData.scrollerCount};
		var showPaging = "#{viewScope[compositeData.viewKey].showPager}" == "true" || scrollerVar ? true : false;
		var filterText = "#{viewScope[compositeData.viewKey].filterText}" != "" ? "#{viewScope[compositeData.viewKey].filterText}" : "filter";
		var filterAttachTo = "#{compositeData.filterAttachTo}";
		var pagerAttachTo = "#{compositeData.pagerAttachTo}";
		var category = $U.getUrlParam("category");
		category = (options != null && options.category) ? options.category : category;
		category = keys != "" && keyIsCategory == "true" ? keys : category;
		var restKeys = $U.getUrlParam("restKeys");
		
		var showCellBorders = "#{compositeData.showCellBorders}" == "true" ? true : false;
		var showInfo = "#{compositeData.showInfo}" == "false" ? false : true;
		var infoAttachTo = "#{compositeData.infoAttachTo}";
		var multiValue = "#{compositeData.multiValue}";
		var multiValueDef = "#{javascript:viewScope[compositeData.viewKey].multiSelect}"; // multi select override from view def doc
		
		multiValue = multiValueDef != "" ? multiValueDef : multiValue;  // override if view def has value 
		
		// create an object with information about fixedHeader 
		var fixedHeader = {}
		fixedHeader.viewport = viewport == "" ? null : viewport;
		fixedHeader.dataTable = dataTableClass;
		fixedHeader.showFilter = showFilter;
		fixedHeader.filterAttachTo = filterAttachTo; /* fliter */
		fixedHeader.showInfo = showInfo;
		fixedHeader.showPaging = showPaging;
		fixedHeader.pagerAttachTo = pagerAttachTo;
		fixedHeader.infoAttachTo = infoAttachTo;
		fixedHeader.thisView = $(".panel"+ thisView);
		fixedHeader.showFixedFooter = showFixedFooter;
		
		// remove existing filter so we don't create a dupe
		if (filterAttachTo != "") {
			$(".dataTables_filter",$(filterAttachTo)).remove();
		} else {
			$(".dataTables_filter",$(".panel" +thisView)).remove();
		}
		
		var queryString = "#{compositeData.queryString}";
		
		/* Need to clean this up */	
		if (category != "") {
			var searchParam = "&category=" + category
		} else if (keys!= "") {
			var searchParam = "&keys=" + keys
		} else if (restKeys != "") {
			var searchParam = "&keys=" + restKeys
		} else if (#{compositeData.thisView}.config.keys != "") {
			var searchParam = "&keys=" + #{compositeData.thisView}.config.keys;
		} else {
			if (search != "") {
				if (unescape(search) === search) {
					var searchParam = "&search=" + escape(search);
				} else {
					var searchParam = "&search=" + search;
				}
			} else {
				var searchParam = query == "" ? "" : "&search=" + query;
			}
		}

		// sorting is defined in ccRestView.buildView() with these values
		/*
		colsObject.sortDefault = sortDefault;
		colsObject.sortDefaultOrder = sortDefaultOrder == "d" ? "desc" : "asc";
		colsObject.sortSecond = sortSecond;
		colsObject.sortSecondOrder = sortSecondOrder == "d" ? "desc" : "asc";
		*/
		colsObject.sortArray = sortArray;
		colsObject.retColumn = retColumn;
		colsObject.multiValue = multiValue;
		
		var module = $U.getUrlParam("module");
		var curUser = "#{sessionScope.config.currentUser}";
		
		// Get the params
		var params = retColumn.indexOf("&") > -1 ? retColumn.split("&") : [retColumn];
		var params = retColumn.indexOf(",") > -1 ? retColumn.split(",") : [retColumn];
		
		if (dataTableClass1 != "") {
			$(".tableRest",$(".panel"+thisView)).addClass(dataTableClass1)
		}
		if (dataTableClass2 != "") {
			$(".tableRest",$(".panel"+thisView)).addClass(dataTableClass2)
		}
			
		$(document).ready(function() {			
			// Look for a fixed footer and remove it
			if (ffClass != "") {
				$("." + ffClass).remove();
			}
		
			var o = ccRestView.buildView(colsObject);	
			o.xpage = xpage; 
			o.thisView = thisView;
			o.dataTableClass = dataTableClass;	
			o.fldSelectedDoc = ".fld"+thisView;  // piggyback extra values to the o object
			
		    // store the view configuration
		    #{compositeData.thisView}.viewConfig = o;
		   
		    // check for cell borders
		    showCellBorders ? $(dataTableClass).addClass("cell-border") : "";
		    
		     // get rest information
			var restToUse = restService != "" ? restService : rest;
			if (options != null) {
				restToUse = options.hasOwnProperty("restService") ? options.restService : restToUse;
				xagent = options.hasOwnProperty("xagent") ? options.xagent : xagent;
			}
			
			var restPageToUse = restPage != "" ? restPage : "rest";
			var restParams = [];
			if (options != null) {
				options.params != "" ? restParams.push("&"+options.params) : "";
			} 

			var restUrl = "/" + restPath + "/" + restPageToUse + ".xsp/" + restToUse;
			if (xagent != "") {
				restUrl = "/" + restPath + "/" + xagent + ".xsp";
			}
			
			// setup variables to be used by refresh button
			#{compositeData.thisView}.config.restUrl = restUrl;
			#{compositeData.thisView}.config.searchParam = searchParam;
			#{compositeData.thisView}.config.restParams = restParams;
			#{compositeData.thisView}.config.restToUse = restToUse;
			#{compositeData.thisView}.config.restPageToUse = restPageToUse;
			
			
			var vTable = $(dataTableClass,$(".panel"+thisView)).DataTable( {
			  "ajax": {
					"url": restUrl + "?&x=x" + searchParam + (restParams.length > 0 ? restParams[0] : "") + queryString + (scrollerCount > 0 ? "&count="+scrollerCount : ""),
					"type": "GET",
					"cache": false,
					"dataSrc": function(tabledata) {
						console.timeEnd("ccRestView : Get Data");
						#{compositeData.thisView}.stats.timeToGetData = Date.now() - #{compositeData.thisView}.stats.timeToGetDataStart;
						console.time("ccRestView : Build Table");
						#{compositeData.thisView}.stats.timeToRenderTableStart = Date.now();
						return tabledata;
					},
					"beforeSend": function() {
						console.time("ccRestView : Get Data");
						#{compositeData.thisView}.stats.timeToGetDataStart = Date.now();
					}
				},
				"columns": o.columns,
				deferRender: true,
				scroller: scrollerVar,
			  	paging: showPaging,
			  	pageLength: 100,
			  	lengthChange: false,
			    searching: showFilter,
			    ordering: (ordering == "" || ordering == "true" ? true : false),
			    #{javascript:compositeData.showFixedHeader==true?'scrollY:100,':''}
			    language: {
					search:searchLang
			    },
			    info: showInfo,
			    order: o.sortColumn,
			    "initComplete": function() {
					console.log("*** initComplete ***");
					var _thisView = window.getFunctionFromString(thisView);						            
					var itemNames = [];
					var itemIndexes = [];
					
					for (y=0;y<_thisView.viewConfig.columnsHead.length;y++) {
					
						if (_thisView.viewConfig.columnsHead[y].category != "true" && _thisView.viewConfig.columnsHead[y].hidden != "true") {
							itemNames.push(_thisView.viewConfig.columnsHead[y].itemName);
							itemIndexes.push(y);
						}
					}
					
					/***************************************************************
					 * FIXED FOOTER
					 **************************************************************/
					 
					if (showFixedFooter) {
						
						var ffObject = {};
						ffObject.viewport = viewport;
						ffObject.thisView = thisView
						ffObject.itemIndexes = itemIndexes;
						ffObject.itemNames = itemNames;
						ffObject.showFixedHeader = showFixedHeader;
						ffObject.ffClass = ffClass;
						ffObject.dataTableClass = dataTableClass;
						_thisView.ffObject = ffObject;
						ccRestView.buildFooter(ffObject);
						
						// custom fixed footer code
						#{compositeData.fixedFooterCode}(this,thisView,vTable,params,o);		
					}
					
					 /***************************************************************
					 * FILTER
					 **************************************************************/
					 var filterHeight;
					if (showFilter) {
						if (filterPlaceholder != "") {
							$(".dataTables_filter input",$(".panel"+thisView)).attr("placeholder",filterPlaceholder);
						}
						filterHeight = $(".dataTables_filter",$(".panel"+thisView)).outerHeight();
						$(".dataTables_filter input",$(".panel"+thisView)).addClass("form-control input-sm");
						//
						$(".dataTables_filter",$(".panel"+thisView)).css({"float":"right"});
						if (filterAttachTo != "") {
							filterHeight = 0;
							fixedHeader.filterHeight = 0;
							$(".dataTables_filter",$(".panel"+thisView)).prependTo(filterAttachTo);
							
						}
						
						$("input",$(".dataTables_filter")).addClass("fldYellow");
						$("input",$(".dataTables_filter")).focus()
					} else { filterHeight = 0}
			         /***************************************************************
					 * PAGER
					 **************************************************************/
					 // dataTables_paginate
					 var pagerHeight;
					 if (showPaging) {
						 pagerHeight = $(".dataTables_paginate",$(".panel"+thisView)).outerHeight()
						 //$(".dataTables_paginate",$(".panel"+thisView)).css({"float":"right","margin-right":"100px"});
						 if (pagerAttachTo != "") {
						 pagerHeight = 0;
							 $(pagerAttachTo).addClass("dataTables_wrapper")
							fixedHeader.filterHeight = 0;
							$(".dataTables_paginate",$(".panel"+thisView)).prependTo(pagerAttachTo);
							
						 }
					 } else { pagerHeight = 0}
			       
					/***************************************************************
					 * INFO
					 **************************************************************/
					var infoHeight;
					if (showInfo) {
						infoHeight = $(".dataTables_info",$(".panel"+thisView)).outerHeight();
						console.log("info="+$(".dataTables_info",$(".panel"+thisView)).outerHeight());
						infoClass != "" ? $(".dataTables_info",$(".panel"+thisView)).addClass(infoClass) : "";
					
						if (infoAttachTo != "") {
							infoHeight = 0;
							// store the id of this control so we can find it later
							#{compositeData.thisView}.config.info = $(".dataTables_info",$(".panel"+thisView)).attr("id");
							
							// move the table info to the footer
					        $(".dataTables_info",$(".panel"+thisView)).prependTo(infoAttachTo);
					        $(".dataTables_info",$(".panel"+thisView)).css({"position":"absolute","top":"0","left":"0","padding":"10px 18px 6px"});
					        $(infoAttachTo).css("min-height",$(".dataTables_info").outerHeight() + "px");
				        }
					 
			        } else { infoHeight = 0;}
			     
			        
			        fixedHeader.filterHeight =  Math.max(filterHeight, pagerHeight, infoHeight);  //showPaging ? $(".dataTables_paginate",$(".panel"+thisView)).outerHeight() : $(".dataTables_filter",$(".panel"+thisView)).outerHeight();  // getting this value to be passed to the fixed header calculator
			        
			        //fixedHeader.filterHeight = $(".dataTables_paginate",$(".panel"+thisView)).outerHeight();  // getting this value to be passed to the fixed header calculator
			        /***************************************************************
					 * TOTAL and AVG
					 **************************************************************/
			        var api = this.api(), data;
			        // get any totals
			        console.log("### INITCOMPLETE GETTOTALS")
			        ccRestView.getTotals(_thisView.viewConfig,api,ffClass);

			        // get any avg
			        ccRestView.getAvg(_thisView.viewConfig,api,ffClass);
			        /*
			        // update the window scroll even so the footer stays in place
			         $( window ).scroll(function() {
			            $(".fixedFooterNew",$(".panel"+thisView)).css("position","fixed");
			            $(".fixedFooterNew",$(".panel"+thisView)).css("bottom","0");
			            $(".fixedFooterNew",$(".panel"+thisView)).css("top","");
		            });
		            */
		            /***************************************************************
					 * FIXED HEADER
					 **************************************************************/
					if (showFixedHeader) {
						$(".dataTables_scrollHead",$(".panel"+thisView)).addClass(fhClass);
					} 
					
					/***************************************************************
					 * RESIZE
					 **************************************************************/
		           
		            /***************************************************************
					 * Set the refresh interval if necessary
					 **************************************************************/
		            // check to see if we need to refresh on an interval
		            var refresh = "#{compositeData.refreshInterval}" == "" ? 0 : Number("#{compositeData.refreshInterval}");
		            if (refresh > 0) {
		        		setInterval(function(){
		        			var loop = true;
		        			var skip = false;
		        			var thisElement = $(".panel" + "_thisView");
		        			
		        			while (loop) {
		        				var parent = thisElement.parent();
		        				
		        				if (parent.css("display") == "none") {
		        					skip = true;
		        					loop = false;
		        				}
		        				thisElement = parent;
		        				if (thisElement.prop("tagName") == "BODY") {
		        					loop = false;
		        				}
		        			}
		        			if (!skip) {
		        				_thisView.build(); 
		        			} else {

		        			}
		        		}, refresh);
		         
		            }

		            /************************************************
					* If scrollerCount is > 0 then make additional 
					* requests until there is no more data
					************************************************/
					
		            if (scrollerCount > 0) {
		            	var lastStart = 0;
		            	scrollerInc = scrollerCount;

						var ajaxOptions = {
							type: 'GET',
						    url: "/" + restPath + "/" + _thisView.config.restPageToUse + ".xsp/" + _thisView.config.restToUse + "?x=x" + _thisView.config.searchParam + "&" + _thisView.config.restParams[x] + "&start="+scrollerCount+"&count="+scrollerCount,
						    contentType: 'application/json',
						    dataType: 'json',
						    cache: false
						}
						function getScrollerData() {
							$.ajax(ajaxOptions)
							.then(function(resp){
								console.log("THEN = " + resp.length)
								var vTable = $(dataTableClass).DataTable();
								vTable.rows.add(resp);
								
								if (resp.length < scrollerCount) {
									
								} else {
									scrollerInc += scrollerCount;
									ajaxOptions.url = "/" + restPath + "/" + _thisView.config.restPageToUse + ".xsp/" + _thisView.config.restToUse + "?x=x" + _thisView.config.searchParam + "&" + _thisView.config.restParams[x] + "&start=" + scrollerInc + "&count=" + scrollerCount
									getScrollerData();
								}
								
							})
							.done(function(resp){
							   //handle final response here
							   console.log("DONE");
							   var vTable = $(dataTableClass).DataTable();
								//vTable.rows.add(response);
								vTable.draw();
								
							 })
						} // end getScrollerData
						getScrollerData();
						
						
		            }
		            
		            
		             if ("#{compositeData.initComplete}" != "") {
		            	#{compositeData.initComplete}(0,dataTableClass);
		            }
		            
	            	// turn off loading message
	            	ccRestView.loading("hide",viewport,thisView)
	            	
	            	// setup keypress
	            	$(".panel"+thisView).bind('keypress', function(e){
	
	            		if (e.shiftKey) {
	            			console.log("shift on")
	            		} else {
	            			console.warn("shift off")
	            		}
	            	});
	            	
	            	/*************************************************
					 FOOTER CALLBACK
					**************************************************/
					if ("#{compositeData.footerCallback}" != "") {
						#{compositeData.footerCallback}(this.thisView);
					}
	            	
	            	renderTime = Date.now() - _thisView.stats.renderStart;

	            	_thisView.stats.renderTime = renderTime;
		            _thisView.isInitComplete = true;
		            console.timeEnd("ccRestView : Build Table");
		            _thisView.stats.timeToRenderTable = Date.now() - _thisView.stats.timeToRenderTableStart;
				}, // end of initComplete
				"rowCallback" : function(row,data,index) {
					 #{compositeData.rowCallback}(row,data,index,params,o);
				},
				"createdRow" : function(row,data,index) {
					
					$(row).addClass( data["@unid"] );
					#{compositeData.createdRow}(row,data,index,params,o);
				},
				"footerCallback" : function(row, data, start, end, display) {
					//#{compositeData.footerCallback}(row, data, start, end, display,o);
				},
				"preDrawCallback" : function() {
					console.log("pre drawcallback")
					if ("#{compositeData.preDrawCallback}" != "") { 
						console.log("pre draw callback")
						#{compositeData.preDrawCallback}();
					}
					if (#{compositeData.thisView}.isInitComplete == false) {
						ccRestView.loading("show",viewport,thisView);
					}
				},
			    "drawCallback": function() {
					console.log("start drawcallback")
									
					var api = this.api();
		            var rows = api.rows( {page:'current'} ).nodes();
		            
		            /**************************************************************
					* ADD DATA-INDEX TO GET SORTED INDEX
		            **************************************************************/
		            $(rows).each(function(index) {
		            	$(this).attr("data-index",index);
		            })
		            
		            var rowCount = 0;
		            var trNew = null;
		            var groupCols = ccRestView.getTotAvgCols(o);
		            o.groupCols = groupCols;
		            var groupTotals = ccRestView.getTotalColumns(o);
		            o.groupTotals = groupTotals;
		            var groupAvgs = ccRestView.getAvgColumns(o);
		            o.groupAvgs = groupAvgs;
		            /***************************************************************
					 * GROUPING
					 **************************************************************/
					ccRestView.groups.buildGroupRows(o,api,rows);
					ccRestView.groups.order(o);
				    
			        /***************************************************************
					* FIXED FOOTER
					**************************************************************/
					if (showFixedFooter) {
					
						ccRestView.buildFooter(#{compositeData.thisView}.ffObject);
						
						// custom fixed footer code
						//#{compositeData.fixedFooterCode}(this,thisView,vTable,params,o);
					}
					
		            /***************************************************************
					 * TOTAL and AVG
					 **************************************************************/
		            // Update the totals
		            console.log("## DRAWCLLBACK GETTOTALS = " + $(".ffDefault").length)
		          //  if ($(".ffDefault").length > 0) {
			            ccRestView.getTotals(#{compositeData.thisView}.viewConfig,api,ffClass);
			            // Update the Avgs
			            ccRestView.getAvg(#{compositeData.thisView}.viewConfig,api,ffClass);
		          //  }

		            
		           /***************************************************************
					 * CUSTOM DRAW CALLBACK
					**************************************************************/
		           #{compositeData.drawCallBack}(this,thisView,vTable,params,o.fldSelectedDoc);
		           
		           if (showFixedHeader) {
			//			$(".dataTables_scrollBody", $(".panel"+thisView)).height(ccRestView.getScrollHeight(fixedHeader));
					}
					// we only want to turn off the loading message if the datatable is NOT in the initComplete phase
					if (#{compositeData.thisView}.isInitComplete == true) {
						ccRestView.loading("hide",viewport,thisView)
					}

					/******************************************************
						Show updated rows and new rows
					******************************************************/
					console.log("looking for updated and new rows");
					if (sessionStorage.getItem("updatedRows") != null) {
						var updatedRows = sessionStorage.getItem("updatedRows").split(",");
						var newRows = sessionStorage.getItem("newRows").split(",");
						newRows = ["EC0B5CCB12A1BDCD85257F23004A8B82"]
						if (newRows != "") {
							for (var x=0;x<newRows.length;x++) {
								$("td", $("."+newRows[x])).addClass("alert-success updateCell");
							}
							//$("."+property, $("."+vRows[w]["@unid"])).addClass("alert-warning updateCell");
						}
						
						
						setTimeout(function() {
							$(".updateCell").removeClass("alert-warning");
							$(".updateCell").removeClass("alert-success");
							$(".updateCell").removeClass("updateCell");
						},5000);
					}
					
					/*************************************************
					 FOOTER CALLBACK
					**************************************************/
					#{compositeData.footerCallback}(this.thisView);
					console.log("end drawCallback")
					
				} // end drawCallback
			}); // end DataTable()
			
			$(dataTableClass).on( 'order.dt', function () {
			    // This will show: "Ordering on column 1 (asc)", for example
			    var order = vTable.order();
			    #{compositeData.thisView}.viewConfig.currentSort = order;
			} );
			
			$(dataTableClass).on( 'column-sizing.dt', function ( e, settings ) {
				// console.log( '*** column resizing ***' );
			} );
			
			$(dataTableClass).on( 'draw.dt', function ( e, settings ) {
				// console.log( '*** draw ***' );
			} );
			
			$(dataTableClass).on( 'search.dt', function () {
				// console.log("Searching");
				
			} );
			$(dataTableClass).on( 'processing.dt', function ( e, settings, processing ) {
			console.log('PROCESSING='+ processing)
		        processing ? console.log('PROCESSING') : '';
		    } )
			
			/***************************************************************
			* ERROR HANDLING
			**************************************************************/
			$(dataTableClass).on( 'error.dt', function ( e, settings, techNote, message ) {
				
				//console.log(message)
				console.dir(e);
				var o = {};
				var flds = {};
				flds.tableClass = e.target.className;
				flds.href = location.href;
				flds.message = message;
				flds.event = "dataTables";
				o.log = flds;
				o.flds = flds;
				console.dir(settings)
				$(".fldJson",top.document).val(JSON.stringify(o));
				$(".btnSaveLog",top.document).click();
				
				// turn off loading message
	            ccRestView.loading("hide",viewport,thisView)
	            
	            // custom error handling
		        #{compositeData.onError}( e, settings, techNote, message);
			} );
			
			 // Order by the grouping
		    $(dataTableClass + " tbody tr").on( 'click', 'tr.group', function () {
		
		    } );
			

		}); //end document.ready
		
	}, // end build
	draw : function() {
		$(this.dataTableClass,$(".panel"+this.thisView)).DataTable().draw();
	},
	collapseAll : function() {
		ccRestView.groups.collapseAll(this.thisView);
	},
	expandAll : function() {
		ccRestView.groups.expandAll(this.thisView);
	}

}
 /***************************************************************
 * ERROR HANDLING
 **************************************************************/
$.fn.dataTable.ext.errMode = 'none';

loadOnInit == "true" ? #{compositeData.thisView}.build() : ""]]></xp:this.value>

	</xp:scriptBlock>
	
</xp:view>
